{"id":"node_modules/@iarna/toml/parse-string.js","dependencies":[{"name":"/Users/jsick/Repos/sandbox/Netview/package.json","includedInParent":true,"mtime":1567459846322},{"name":"/Users/jsick/Repos/sandbox/Netview/node_modules/@iarna/toml/package.json","includedInParent":true,"mtime":1567280178401},{"name":"./lib/toml-parser.js","loc":{"line":4,"column":27},"parent":"/Users/jsick/Repos/sandbox/Netview/node_modules/@iarna/toml/parse-string.js","resolved":"/Users/jsick/Repos/sandbox/Netview/node_modules/@iarna/toml/lib/toml-parser.js"},{"name":"./parse-pretty-error.js","loc":{"line":5,"column":28},"parent":"/Users/jsick/Repos/sandbox/Netview/node_modules/@iarna/toml/parse-string.js","resolved":"/Users/jsick/Repos/sandbox/Netview/node_modules/@iarna/toml/parse-pretty-error.js"}],"generated":{"js":"var global = arguments[3];\n'use strict'\nmodule.exports = parseString\n\nconst TOMLParser = require('./lib/toml-parser.js')\nconst prettyError = require('./parse-pretty-error.js')\n\nfunction parseString (str) {\n  if (global.Buffer && global.Buffer.isBuffer(str)) {\n    str = str.toString('utf8')\n  }\n  const parser = new TOMLParser()\n  try {\n    parser.parse(str)\n    return parser.finish()\n  } catch (err) {\n    throw prettyError(err, str)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@iarna/toml/parse-string.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}}],"sources":{"node_modules/@iarna/toml/parse-string.js":"'use strict'\nmodule.exports = parseString\n\nconst TOMLParser = require('./lib/toml-parser.js')\nconst prettyError = require('./parse-pretty-error.js')\n\nfunction parseString (str) {\n  if (global.Buffer && global.Buffer.isBuffer(str)) {\n    str = str.toString('utf8')\n  }\n  const parser = new TOMLParser()\n  try {\n    parser.parse(str)\n    return parser.finish()\n  } catch (err) {\n    throw prettyError(err, str)\n  }\n}\n"},"lineCount":20}},"error":null,"hash":"8cc486d5e6a993dce445358eb4d7b834","cacheData":{"env":{}}}